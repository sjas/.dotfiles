#
#
#   s j a s   b a s h / z s h   g i t   a l i a s e s
#
#
###################################################################

# add vim and emacs tempfiles to gitignore
ignore() {
    touch .gitignore
    echo "*.sw*\n*#\ntags\n*~\n" | cat >> .gitignore
    git add .gitignore
    git commit -am "gitignore ignores vim and emacs tempfiles"
}
# clean tempfiles/swapfiles
clean() {
    find . -name "#*#" | xargs rm
    find . -name "*.sw*" | xargs rm
    find . -name "*~" | xargs rm
}
swap() {
    find . -name "#*#"
    find . -name "*.sw*"
    find . -name "*~"
}

alias g="git"
alias gh="git h"
alias gha="git ha"
alias ghi="git hi"
alias gla="git la"

alias gcl="git cl"

alias ga="git a"
alias gaa="git aa"
alias gai="git ai"
alias gr="git r"
alias grc="git rc"

gitcommit(){
	git c "$*"
}
alias gc=gitcommit
alias gfc="git fc"
gitcommitall(){
	git ca "$*"
}
alias gca=gitcommitall
alias gmc="git mc"
alias gmca="git mca"
alias gcam="git cam"
alias gfcam="git fcam"
alias grs="git rs"
alias grshh="git rshh"
alias gccm="git ccm"

alias gt="git t"
alias gtl="git tl"
alias gtd="git td"
alias gtdo="git tdo"

alias gn="git n"
alias gnv="git nv"
alias gna="git na"
alias gnap="git nap"
alias gne="git ne"
alias gns="git ns"
alias gnr="git nr"

alias gd="git d"
alias gds="git ds"
alias gdu="git du"
alias gdt="git dt"
alias gdh="git dh"
alias gdhc="git dhc"
alias gdhp="git dhp"
alias gdc="git dc"

alias gst="git st"
alias gstl="git stl"
alias gstp="git stp"
alias gsta="git sta"

alias gs="git s"
alias gss="git ss"
alias gsa="git sa"
alias gssa="git ssa"
alias gsh="git sh"

alias gls="git ls"
alias glsd="git lsd"
alias glsf="git lsf"
alias glsfd="git lsfd"
alias glsfa="git lsfa"
alias glsfad="git lsfad"
alias glsfav="git lsfav"
alias glsfavd="git lsfavd"

alias gsb="git sb"
alias gsba="git sba"
alias gsbaf="git sbaf"
alias gsbl="git sbl"
alias gsblf="git sblf"
alias gsl="git sl"

alias gb="git b"
alias gba="git ba"
alias gbd="git bd"
alias gco="git co"
alias gcob="git cob"

alias gm="git m"
alias grb="git rb"
alias grbi="git rbi"
alias grbc="git rbc"
alias grbs="git rbs"
alias grba="git rba"

alias gp="git p"
alias gpp="git pp"
alias gpup="git pup"
alias grmrb="git rmrb"
gitfastpush(){
	git ca "$*";
	git p
}
alias gfp=gitfastpush
alias gf="git f"
alias grem="git rem"
alias grems="git rems"
alias garem="git arem"
alias grrem="git rrem"

alias gsco="git sco"
alias gsci="git sci"
alias gsup="git sup"

alias gllc="git llc"
alias glsha="git lsha"
alias glshaf="git lshaf"
alias grl="git rl"
alias gl="git l"
alias glp="git lp"
alias gll="git ll"
alias glll="git lll"
alias glo="git lo"
alias gllo="git llo"
alias glllo="git lllo"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# this function lets you call your git aliases without explicitly defining an
# alias for each one of them, eg. gco triggers automatically 'g co' etc.
# http://superuser.com/a/756845/322005
command_not_found_handle() {
    case $1 in
    # ffd*) find . -type d -iname "*${1#ffd}*"
        # return 0
        # ;;
    g*) git ${1#g} "${@:2}"
        return 0
        ;;
esac

#gitinfo
	alias gi=gitinfo
	# Get a quick overview for your Git repo
	function gitinfo() {
		if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
			echo "Git Repository Overview"
				echo "-----------------------"
				echo
	# List all remotes
				for remote in $(git remote show); do
					echo $remote:
						git remote show $remote
						echo
						done
	# Show status of working repo
						echo "Status:"
						if [ -n "$(git status -s 2> /dev/null)" ]; then
							git status -s
						else
							echo "Working directory is clean"
								fi
	# Print 5 most recent logs
								echo
								echo "Log:"
								git log -5 --oneline
								echo
		else
			echo `pwd` "is not a Git repository"
				fi
	}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


#gitstats
	alias gstats=gitstats
	# Get various Git statistics
	# Awesome work from https://github.com/esc/git-stats
	# including some modifications from BASH_IT
	function gitstats {
		if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
			echo "Number of commits per author:"
				git --no-pager shortlog -sn --all
				AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ')
				LOGOPTS=""
				if [ "$1" == '-w' ]; then
					LOGOPTS="$LOGOPTS -w"
						shift
						fi
						if [ "$1" == '-M' ]; then
							LOGOPTS="$LOGOPTS -M"
								shift
								fi
								if [ "$1" == '-C' ]; then
									LOGOPTS="$LOGOPTS -C --find-copies-harder"
										shift
										fi
										for a in $AUTHORS
											do
												echo '-------------------'
													echo "Statistics for: $a"
													echo -n "Number of files changed: "
													git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f3 | sort -iu | wc -l
													echo -n "Number of lines added: "
													git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f1 | awk '{s+=$1} END {print s}'
													echo -n "Number of lines deleted: "
													git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f2 | awk '{s+=$1} END {print s}'
													echo -n "Number of merges: "
													git log $LOGOPTS --all --merges --author=$a | grep -c '^commit'
													done
								else
									echo `pwd` "is not a Git repository"
										fi
	}
